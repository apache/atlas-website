#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Org

module Apache

module Atlas

module Model

module Glossary

module Relations

  # (no documentation provided)
  class AtlasTermAssignmentHeader 

    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :confidence
    # (no documentation provided)
    attr_accessor :source
    # (no documentation provided)
    attr_accessor :relationGuid
    # (no documentation provided)
    attr_accessor :termGuid
    # (no documentation provided)
    attr_accessor :expression
    # (no documentation provided)
    attr_accessor :displayText
    # (no documentation provided)
    attr_accessor :steward

    # the json hash for this AtlasTermAssignmentHeader
    def to_jaxb_json_hash
      _h = {}
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['confidence'] = confidence.to_jaxb_json_hash unless confidence.nil?
      _h['source'] = source.to_jaxb_json_hash unless source.nil?
      _h['relationGuid'] = relationGuid.to_jaxb_json_hash unless relationGuid.nil?
      _h['termGuid'] = termGuid.to_jaxb_json_hash unless termGuid.nil?
      _h['expression'] = expression.to_jaxb_json_hash unless expression.nil?
      _h['displayText'] = displayText.to_jaxb_json_hash unless displayText.nil?
      _h['steward'] = steward.to_jaxb_json_hash unless steward.nil?
      return _h
    end

    # the json (string form) for this AtlasTermAssignmentHeader
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AtlasTermAssignmentHeader with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['confidence'].nil?
          _oa = _o['confidence']
            if(_oa.is_a? Hash)
              @confidence = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @confidence =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @confidence = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @confidence.push Fixnum.from_json(_item)
                 else
                   @confidence.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @confidence = _oa
            end
          end
        if !_o['source'].nil?
          _oa = _o['source']
            if(_oa.is_a? Hash)
              @source = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @source =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @source = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @source.push String.from_json(_item)
                 else
                   @source.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @source = _oa
            end
          end
        if !_o['relationGuid'].nil?
          _oa = _o['relationGuid']
            if(_oa.is_a? Hash)
              @relationGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationGuid.push String.from_json(_item)
                 else
                   @relationGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationGuid = _oa
            end
          end
        if !_o['termGuid'].nil?
          _oa = _o['termGuid']
            if(_oa.is_a? Hash)
              @termGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @termGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @termGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @termGuid.push String.from_json(_item)
                 else
                   @termGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @termGuid = _oa
            end
          end
        if !_o['expression'].nil?
          _oa = _o['expression']
            if(_oa.is_a? Hash)
              @expression = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expression =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expression = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expression.push String.from_json(_item)
                 else
                   @expression.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expression = _oa
            end
          end
        if !_o['displayText'].nil?
          _oa = _o['displayText']
            if(_oa.is_a? Hash)
              @displayText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayText.push String.from_json(_item)
                 else
                   @displayText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayText = _oa
            end
          end
        if !_o['steward'].nil?
          _oa = _o['steward']
            if(_oa.is_a? Hash)
              @steward = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @steward =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @steward = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @steward.push String.from_json(_item)
                 else
                   @steward.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @steward = _oa
            end
          end
    end

    # constructs a AtlasTermAssignmentHeader from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class ClassificationAssociateRequest 

    # (no documentation provided)
    attr_accessor :classification
    # (no documentation provided)
    attr_accessor :entityGuids

    # the json hash for this ClassificationAssociateRequest
    def to_jaxb_json_hash
      _h = {}
      _h['classification'] = classification.to_jaxb_json_hash unless classification.nil?
      if !entityGuids.nil?
        _ha = Array.new
        entityGuids.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['entityGuids'] = _ha
      end
      return _h
    end

    # the json (string form) for this ClassificationAssociateRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ClassificationAssociateRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['classification'].nil?
          _oa = _o['classification']
            if(_oa.is_a? Hash)
              @classification = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classification =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classification = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classification.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @classification.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classification = _oa
            end
          end
        if !_o['entityGuids'].nil?
          _oa = _o['entityGuids']
            if(_oa.is_a? Hash)
              @entityGuids = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @entityGuids =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @entityGuids = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @entityGuids.push String.from_json(_item)
                 else
                   @entityGuids.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @entityGuids = _oa
            end
          end
    end

    # constructs a ClassificationAssociateRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

  # (no documentation provided)
  class TimeBoundary 

    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :timeZone

    # the json hash for this TimeBoundary
    def to_jaxb_json_hash
      _h = {}
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['timeZone'] = timeZone.to_jaxb_json_hash unless timeZone.nil?
      return _h
    end

    # the json (string form) for this TimeBoundary
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TimeBoundary with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push String.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push String.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['timeZone'].nil?
          _oa = _o['timeZone']
            if(_oa.is_a? Hash)
              @timeZone = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timeZone =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timeZone = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timeZone.push String.from_json(_item)
                 else
                   @timeZone.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timeZone = _oa
            end
          end
    end

    # constructs a TimeBoundary from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasObjectId 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :typeName
    # (no documentation provided)
    attr_accessor :uniqueAttributes

    # the json hash for this AtlasObjectId
    def to_jaxb_json_hash
      _h = {}
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['typeName'] = typeName.to_jaxb_json_hash unless typeName.nil?
      _h['uniqueAttributes'] = uniqueAttributes.to_jaxb_json_hash unless uniqueAttributes.nil?
      return _h
    end

    # the json (string form) for this AtlasObjectId
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AtlasObjectId with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['typeName'].nil?
          _oa = _o['typeName']
            if(_oa.is_a? Hash)
              @typeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @typeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @typeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @typeName.push String.from_json(_item)
                 else
                   @typeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @typeName = _oa
            end
          end
        if !_o['uniqueAttributes'].nil?
          _oa = _o['uniqueAttributes']
            if(_oa.is_a? Hash)
              @uniqueAttributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uniqueAttributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uniqueAttributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uniqueAttributes.push Hash.from_json(_item)
                 else
                   @uniqueAttributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uniqueAttributes = _oa
            end
          end
    end

    # constructs a AtlasObjectId from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasStruct 

    # (no documentation provided)
    attr_accessor :typeName
    # (no documentation provided)
    attr_accessor :attributes

    # the json hash for this AtlasStruct
    def to_jaxb_json_hash
      _h = {}
      _h['typeName'] = typeName.to_jaxb_json_hash unless typeName.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      return _h
    end

    # the json (string form) for this AtlasStruct
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AtlasStruct with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['typeName'].nil?
          _oa = _o['typeName']
            if(_oa.is_a? Hash)
              @typeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @typeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @typeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @typeName.push String.from_json(_item)
                 else
                   @typeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @typeName = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
    end

    # constructs a AtlasStruct from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasRelationship < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :updatedBy
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :end1
    # (no documentation provided)
    attr_accessor :end2
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :propagateTags
    # (no documentation provided)
    attr_accessor :propagatedClassifications
    # (no documentation provided)
    attr_accessor :blockedPropagatedClassifications

    # the json hash for this AtlasRelationship
    def to_jaxb_json_hash
      _h = super
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['end1'] = end1.to_jaxb_json_hash unless end1.nil?
      _h['end2'] = end2.to_jaxb_json_hash unless end2.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['propagateTags'] = propagateTags.to_jaxb_json_hash unless propagateTags.nil?
      if !propagatedClassifications.nil?
        _ha = Array.new
        propagatedClassifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['propagatedClassifications'] = _ha
      end
      if !blockedPropagatedClassifications.nil?
        _ha = Array.new
        blockedPropagatedClassifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['blockedPropagatedClassifications'] = _ha
      end
      return _h
    end

    #initializes this AtlasRelationship with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Bignum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['end1'].nil?
          _oa = _o['end1']
            if(_oa.is_a? Hash)
              @end1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end1 =  Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end1.push Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_item)
                 else
                   @end1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end1 = _oa
            end
          end
        if !_o['end2'].nil?
          _oa = _o['end2']
            if(_oa.is_a? Hash)
              @end2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end2 =  Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end2.push Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_item)
                 else
                   @end2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end2 = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['propagateTags'].nil?
          _oa = _o['propagateTags']
            if(_oa.is_a? Hash)
              @propagateTags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagateTags =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagateTags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagateTags.push String.from_json(_item)
                 else
                   @propagateTags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagateTags = _oa
            end
          end
        if !_o['propagatedClassifications'].nil?
          _oa = _o['propagatedClassifications']
            if(_oa.is_a? Hash)
              @propagatedClassifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagatedClassifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagatedClassifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagatedClassifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @propagatedClassifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagatedClassifications = _oa
            end
          end
        if !_o['blockedPropagatedClassifications'].nil?
          _oa = _o['blockedPropagatedClassifications']
            if(_oa.is_a? Hash)
              @blockedPropagatedClassifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @blockedPropagatedClassifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @blockedPropagatedClassifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @blockedPropagatedClassifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @blockedPropagatedClassifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @blockedPropagatedClassifications = _oa
            end
          end
    end

    # constructs a AtlasRelationship from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Glossary

module Enums

  # (no documentation provided)
  class AtlasTermAssignmentStatus

    # (no documentation provided)
    DISCOVERED = "DISCOVERED"

    # (no documentation provided)
    PROPOSED = "PROPOSED"

    # (no documentation provided)
    IMPORTED = "IMPORTED"

    # (no documentation provided)
    VALIDATED = "VALIDATED"

    # (no documentation provided)
    DEPRECATED = "DEPRECATED"

    # (no documentation provided)
    OBSOLETE = "OBSOLETE"

    # (no documentation provided)
    OTHER = "OTHER"
  end

end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasEntity < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :updatedBy
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :relationshipAttributes
    # (no documentation provided)
    attr_accessor :classifications
    # (no documentation provided)
    attr_accessor :meanings

    # the json hash for this AtlasEntity
    def to_jaxb_json_hash
      _h = super
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['relationshipAttributes'] = relationshipAttributes.to_jaxb_json_hash unless relationshipAttributes.nil?
      if !classifications.nil?
        _ha = Array.new
        classifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['classifications'] = _ha
      end
      if !meanings.nil?
        _ha = Array.new
        meanings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['meanings'] = _ha
      end
      return _h
    end

    #initializes this AtlasEntity with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Bignum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['relationshipAttributes'].nil?
          _oa = _o['relationshipAttributes']
            if(_oa.is_a? Hash)
              @relationshipAttributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipAttributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipAttributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipAttributes.push Hash.from_json(_item)
                 else
                   @relationshipAttributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipAttributes = _oa
            end
          end
        if !_o['classifications'].nil?
          _oa = _o['classifications']
            if(_oa.is_a? Hash)
              @classifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @classifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classifications = _oa
            end
          end
        if !_o['meanings'].nil?
          _oa = _o['meanings']
            if(_oa.is_a? Hash)
              @meanings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meanings =  Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meanings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meanings.push Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_item)
                 else
                   @meanings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meanings = _oa
            end
          end
    end

    # constructs a AtlasEntity from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class Status

    # (no documentation provided)
    ACTIVE = "ACTIVE"

    # (no documentation provided)
    DELETED = "DELETED"
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasClassification < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :entityGuid
    # (no documentation provided)
    attr_accessor :propagate
    # (no documentation provided)
    attr_accessor :validityPeriods

    # the json hash for this AtlasClassification
    def to_jaxb_json_hash
      _h = super
      _h['entityGuid'] = entityGuid.to_jaxb_json_hash unless entityGuid.nil?
      _h['propagate'] = propagate.to_jaxb_json_hash unless propagate.nil?
      if !validityPeriods.nil?
        _ha = Array.new
        validityPeriods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['validityPeriods'] = _ha
      end
      return _h
    end

    #initializes this AtlasClassification with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['entityGuid'].nil?
          _oa = _o['entityGuid']
            if(_oa.is_a? Hash)
              @entityGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @entityGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @entityGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @entityGuid.push String.from_json(_item)
                 else
                   @entityGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @entityGuid = _oa
            end
          end
        if !_o['propagate'].nil?
          _oa = _o['propagate']
            if(_oa.is_a? Hash)
              @propagate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagate =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagate.push Boolean.from_json(_item)
                 else
                   @propagate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagate = _oa
            end
          end
        if !_o['validityPeriods'].nil?
          _oa = _o['validityPeriods']
            if(_oa.is_a? Hash)
              @validityPeriods = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validityPeriods =  Org::Apache::Atlas::Model::TimeBoundary.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validityPeriods = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validityPeriods.push Org::Apache::Atlas::Model::TimeBoundary.from_json(_item)
                 else
                   @validityPeriods.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validityPeriods = _oa
            end
          end
    end

    # constructs a AtlasClassification from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasEntityHeader < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :displayText
    # (no documentation provided)
    attr_accessor :classificationNames
    # (no documentation provided)
    attr_accessor :classifications
    # (no documentation provided)
    attr_accessor :meaningNames
    # (no documentation provided)
    attr_accessor :meanings

    # the json hash for this AtlasEntityHeader
    def to_jaxb_json_hash
      _h = super
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['displayText'] = displayText.to_jaxb_json_hash unless displayText.nil?
      if !classificationNames.nil?
        _ha = Array.new
        classificationNames.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['classificationNames'] = _ha
      end
      if !classifications.nil?
        _ha = Array.new
        classifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['classifications'] = _ha
      end
      if !meaningNames.nil?
        _ha = Array.new
        meaningNames.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['meaningNames'] = _ha
      end
      if !meanings.nil?
        _ha = Array.new
        meanings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['meanings'] = _ha
      end
      return _h
    end

    #initializes this AtlasEntityHeader with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['displayText'].nil?
          _oa = _o['displayText']
            if(_oa.is_a? Hash)
              @displayText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayText.push String.from_json(_item)
                 else
                   @displayText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayText = _oa
            end
          end
        if !_o['classificationNames'].nil?
          _oa = _o['classificationNames']
            if(_oa.is_a? Hash)
              @classificationNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classificationNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classificationNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classificationNames.push String.from_json(_item)
                 else
                   @classificationNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classificationNames = _oa
            end
          end
        if !_o['classifications'].nil?
          _oa = _o['classifications']
            if(_oa.is_a? Hash)
              @classifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @classifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classifications = _oa
            end
          end
        if !_o['meaningNames'].nil?
          _oa = _o['meaningNames']
            if(_oa.is_a? Hash)
              @meaningNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meaningNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meaningNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meaningNames.push String.from_json(_item)
                 else
                   @meaningNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meaningNames = _oa
            end
          end
        if !_o['meanings'].nil?
          _oa = _o['meanings']
            if(_oa.is_a? Hash)
              @meanings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meanings =  Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meanings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meanings.push Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_item)
                 else
                   @meanings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meanings = _oa
            end
          end
    end

    # constructs a AtlasEntityHeader from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Typedef

  # (no documentation provided)
  class PropagateTags

    # (no documentation provided)
    NONE = "NONE"

    # (no documentation provided)
    ONE_TO_TWO = "ONE_TO_TWO"

    # (no documentation provided)
    TWO_TO_ONE = "TWO_TO_ONE"

    # (no documentation provided)
    BOTH = "BOTH"
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class Status

    # (no documentation provided)
    ACTIVE = "ACTIVE"

    # (no documentation provided)
    DELETED = "DELETED"
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasRelatedObjectId < Org::Apache::Atlas::Model::Instance::AtlasObjectId 

    # (no documentation provided)
    attr_accessor :displayText
    # (no documentation provided)
    attr_accessor :relationshipGuid
    # (no documentation provided)
    attr_accessor :relationshipAttributes
    # (no documentation provided)
    attr_accessor :relationshipStatus

    # the json hash for this AtlasRelatedObjectId
    def to_jaxb_json_hash
      _h = super
      _h['displayText'] = displayText.to_jaxb_json_hash unless displayText.nil?
      _h['relationshipGuid'] = relationshipGuid.to_jaxb_json_hash unless relationshipGuid.nil?
      _h['relationshipAttributes'] = relationshipAttributes.to_jaxb_json_hash unless relationshipAttributes.nil?
      _h['relationshipStatus'] = relationshipStatus.to_jaxb_json_hash unless relationshipStatus.nil?
      return _h
    end

    #initializes this AtlasRelatedObjectId with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['displayText'].nil?
          _oa = _o['displayText']
            if(_oa.is_a? Hash)
              @displayText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayText.push String.from_json(_item)
                 else
                   @displayText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayText = _oa
            end
          end
        if !_o['relationshipGuid'].nil?
          _oa = _o['relationshipGuid']
            if(_oa.is_a? Hash)
              @relationshipGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipGuid.push String.from_json(_item)
                 else
                   @relationshipGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipGuid = _oa
            end
          end
        if !_o['relationshipAttributes'].nil?
          _oa = _o['relationshipAttributes']
            if(_oa.is_a? Hash)
              @relationshipAttributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipAttributes =  Org::Apache::Atlas::Model::Instance::AtlasStruct.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipAttributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipAttributes.push Org::Apache::Atlas::Model::Instance::AtlasStruct.from_json(_item)
                 else
                   @relationshipAttributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipAttributes = _oa
            end
          end
        if !_o['relationshipStatus'].nil?
          _oa = _o['relationshipStatus']
            if(_oa.is_a? Hash)
              @relationshipStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipStatus.push String.from_json(_item)
                 else
                   @relationshipStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipStatus = _oa
            end
          end
    end

    # constructs a AtlasRelatedObjectId from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasRelatedObjectId < Org::Apache::Atlas::Model::Instance::AtlasObjectId 

    # (no documentation provided)
    attr_accessor :displayText
    # (no documentation provided)
    attr_accessor :relationshipGuid
    # (no documentation provided)
    attr_accessor :relationshipAttributes
    # (no documentation provided)
    attr_accessor :relationshipStatus

    # the json hash for this AtlasRelatedObjectId
    def to_jaxb_json_hash
      _h = super
      _h['displayText'] = displayText.to_jaxb_json_hash unless displayText.nil?
      _h['relationshipGuid'] = relationshipGuid.to_jaxb_json_hash unless relationshipGuid.nil?
      _h['relationshipAttributes'] = relationshipAttributes.to_jaxb_json_hash unless relationshipAttributes.nil?
      _h['relationshipStatus'] = relationshipStatus.to_jaxb_json_hash unless relationshipStatus.nil?
      return _h
    end

    #initializes this AtlasRelatedObjectId with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['displayText'].nil?
          _oa = _o['displayText']
            if(_oa.is_a? Hash)
              @displayText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayText.push String.from_json(_item)
                 else
                   @displayText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayText = _oa
            end
          end
        if !_o['relationshipGuid'].nil?
          _oa = _o['relationshipGuid']
            if(_oa.is_a? Hash)
              @relationshipGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipGuid.push String.from_json(_item)
                 else
                   @relationshipGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipGuid = _oa
            end
          end
        if !_o['relationshipAttributes'].nil?
          _oa = _o['relationshipAttributes']
            if(_oa.is_a? Hash)
              @relationshipAttributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipAttributes =  Org::Apache::Atlas::Model::Instance::AtlasStruct.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipAttributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipAttributes.push Org::Apache::Atlas::Model::Instance::AtlasStruct.from_json(_item)
                 else
                   @relationshipAttributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipAttributes = _oa
            end
          end
        if !_o['relationshipStatus'].nil?
          _oa = _o['relationshipStatus']
            if(_oa.is_a? Hash)
              @relationshipStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipStatus.push String.from_json(_item)
                 else
                   @relationshipStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipStatus = _oa
            end
          end
    end

    # constructs a AtlasRelatedObjectId from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasStruct 

    # (no documentation provided)
    attr_accessor :typeName
    # (no documentation provided)
    attr_accessor :attributes

    # the json hash for this AtlasStruct
    def to_jaxb_json_hash
      _h = {}
      _h['typeName'] = typeName.to_jaxb_json_hash unless typeName.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      return _h
    end

    # the json (string form) for this AtlasStruct
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AtlasStruct with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['typeName'].nil?
          _oa = _o['typeName']
            if(_oa.is_a? Hash)
              @typeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @typeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @typeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @typeName.push String.from_json(_item)
                 else
                   @typeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @typeName = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
    end

    # constructs a AtlasStruct from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class Status

    # (no documentation provided)
    ACTIVE = "ACTIVE"

    # (no documentation provided)
    DELETED = "DELETED"
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Typedef

  # (no documentation provided)
  class PropagateTags

    # (no documentation provided)
    NONE = "NONE"

    # (no documentation provided)
    ONE_TO_TWO = "ONE_TO_TWO"

    # (no documentation provided)
    TWO_TO_ONE = "TWO_TO_ONE"

    # (no documentation provided)
    BOTH = "BOTH"
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

  # (no documentation provided)
  class TimeBoundary 

    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :timeZone

    # the json hash for this TimeBoundary
    def to_jaxb_json_hash
      _h = {}
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['timeZone'] = timeZone.to_jaxb_json_hash unless timeZone.nil?
      return _h
    end

    # the json (string form) for this TimeBoundary
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TimeBoundary with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push String.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push String.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['timeZone'].nil?
          _oa = _o['timeZone']
            if(_oa.is_a? Hash)
              @timeZone = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timeZone =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timeZone = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timeZone.push String.from_json(_item)
                 else
                   @timeZone.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timeZone = _oa
            end
          end
    end

    # constructs a TimeBoundary from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class Status

    # (no documentation provided)
    ACTIVE = "ACTIVE"

    # (no documentation provided)
    DELETED = "DELETED"
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Glossary

module Relations

  # (no documentation provided)
  class AtlasTermAssignmentHeader 

    # (no documentation provided)
    attr_accessor :confidence
    # (no documentation provided)
    attr_accessor :relationGuid
    # (no documentation provided)
    attr_accessor :source
    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :displayText
    # (no documentation provided)
    attr_accessor :termGuid
    # (no documentation provided)
    attr_accessor :steward
    # (no documentation provided)
    attr_accessor :expression
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this AtlasTermAssignmentHeader
    def to_jaxb_json_hash
      _h = {}
      _h['confidence'] = confidence.to_jaxb_json_hash unless confidence.nil?
      _h['relationGuid'] = relationGuid.to_jaxb_json_hash unless relationGuid.nil?
      _h['source'] = source.to_jaxb_json_hash unless source.nil?
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['displayText'] = displayText.to_jaxb_json_hash unless displayText.nil?
      _h['termGuid'] = termGuid.to_jaxb_json_hash unless termGuid.nil?
      _h['steward'] = steward.to_jaxb_json_hash unless steward.nil?
      _h['expression'] = expression.to_jaxb_json_hash unless expression.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    # the json (string form) for this AtlasTermAssignmentHeader
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AtlasTermAssignmentHeader with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['confidence'].nil?
          _oa = _o['confidence']
            if(_oa.is_a? Hash)
              @confidence = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @confidence =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @confidence = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @confidence.push Fixnum.from_json(_item)
                 else
                   @confidence.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @confidence = _oa
            end
          end
        if !_o['relationGuid'].nil?
          _oa = _o['relationGuid']
            if(_oa.is_a? Hash)
              @relationGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationGuid.push String.from_json(_item)
                 else
                   @relationGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationGuid = _oa
            end
          end
        if !_o['source'].nil?
          _oa = _o['source']
            if(_oa.is_a? Hash)
              @source = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @source =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @source = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @source.push String.from_json(_item)
                 else
                   @source.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @source = _oa
            end
          end
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['displayText'].nil?
          _oa = _o['displayText']
            if(_oa.is_a? Hash)
              @displayText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayText.push String.from_json(_item)
                 else
                   @displayText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayText = _oa
            end
          end
        if !_o['termGuid'].nil?
          _oa = _o['termGuid']
            if(_oa.is_a? Hash)
              @termGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @termGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @termGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @termGuid.push String.from_json(_item)
                 else
                   @termGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @termGuid = _oa
            end
          end
        if !_o['steward'].nil?
          _oa = _o['steward']
            if(_oa.is_a? Hash)
              @steward = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @steward =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @steward = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @steward.push String.from_json(_item)
                 else
                   @steward.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @steward = _oa
            end
          end
        if !_o['expression'].nil?
          _oa = _o['expression']
            if(_oa.is_a? Hash)
              @expression = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expression =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expression = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expression.push String.from_json(_item)
                 else
                   @expression.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expression = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a AtlasTermAssignmentHeader from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class ClassificationAssociateRequest 

    # (no documentation provided)
    attr_accessor :classification
    # (no documentation provided)
    attr_accessor :entityGuids

    # the json hash for this ClassificationAssociateRequest
    def to_jaxb_json_hash
      _h = {}
      _h['classification'] = classification.to_jaxb_json_hash unless classification.nil?
      if !entityGuids.nil?
        _ha = Array.new
        entityGuids.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['entityGuids'] = _ha
      end
      return _h
    end

    # the json (string form) for this ClassificationAssociateRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ClassificationAssociateRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['classification'].nil?
          _oa = _o['classification']
            if(_oa.is_a? Hash)
              @classification = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classification =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classification = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classification.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @classification.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classification = _oa
            end
          end
        if !_o['entityGuids'].nil?
          _oa = _o['entityGuids']
            if(_oa.is_a? Hash)
              @entityGuids = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @entityGuids =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @entityGuids = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @entityGuids.push String.from_json(_item)
                 else
                   @entityGuids.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @entityGuids = _oa
            end
          end
    end

    # constructs a ClassificationAssociateRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasObjectId 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :typeName
    # (no documentation provided)
    attr_accessor :uniqueAttributes

    # the json hash for this AtlasObjectId
    def to_jaxb_json_hash
      _h = {}
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['typeName'] = typeName.to_jaxb_json_hash unless typeName.nil?
      _h['uniqueAttributes'] = uniqueAttributes.to_jaxb_json_hash unless uniqueAttributes.nil?
      return _h
    end

    # the json (string form) for this AtlasObjectId
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AtlasObjectId with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['typeName'].nil?
          _oa = _o['typeName']
            if(_oa.is_a? Hash)
              @typeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @typeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @typeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @typeName.push String.from_json(_item)
                 else
                   @typeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @typeName = _oa
            end
          end
        if !_o['uniqueAttributes'].nil?
          _oa = _o['uniqueAttributes']
            if(_oa.is_a? Hash)
              @uniqueAttributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uniqueAttributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uniqueAttributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uniqueAttributes.push Hash.from_json(_item)
                 else
                   @uniqueAttributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uniqueAttributes = _oa
            end
          end
    end

    # constructs a AtlasObjectId from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasClassification < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :entityGuid
    # (no documentation provided)
    attr_accessor :propagate
    # (no documentation provided)
    attr_accessor :validityPeriods

    # the json hash for this AtlasClassification
    def to_jaxb_json_hash
      _h = super
      _h['entityGuid'] = entityGuid.to_jaxb_json_hash unless entityGuid.nil?
      _h['propagate'] = propagate.to_jaxb_json_hash unless propagate.nil?
      if !validityPeriods.nil?
        _ha = Array.new
        validityPeriods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['validityPeriods'] = _ha
      end
      return _h
    end

    #initializes this AtlasClassification with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['entityGuid'].nil?
          _oa = _o['entityGuid']
            if(_oa.is_a? Hash)
              @entityGuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @entityGuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @entityGuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @entityGuid.push String.from_json(_item)
                 else
                   @entityGuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @entityGuid = _oa
            end
          end
        if !_o['propagate'].nil?
          _oa = _o['propagate']
            if(_oa.is_a? Hash)
              @propagate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagate =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagate.push Boolean.from_json(_item)
                 else
                   @propagate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagate = _oa
            end
          end
        if !_o['validityPeriods'].nil?
          _oa = _o['validityPeriods']
            if(_oa.is_a? Hash)
              @validityPeriods = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validityPeriods =  Org::Apache::Atlas::Model::TimeBoundary.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validityPeriods = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validityPeriods.push Org::Apache::Atlas::Model::TimeBoundary.from_json(_item)
                 else
                   @validityPeriods.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validityPeriods = _oa
            end
          end
    end

    # constructs a AtlasClassification from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasEntityHeader < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :displayText
    # (no documentation provided)
    attr_accessor :classificationNames
    # (no documentation provided)
    attr_accessor :classifications
    # (no documentation provided)
    attr_accessor :meaningNames
    # (no documentation provided)
    attr_accessor :meanings

    # the json hash for this AtlasEntityHeader
    def to_jaxb_json_hash
      _h = super
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['displayText'] = displayText.to_jaxb_json_hash unless displayText.nil?
      if !classificationNames.nil?
        _ha = Array.new
        classificationNames.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['classificationNames'] = _ha
      end
      if !classifications.nil?
        _ha = Array.new
        classifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['classifications'] = _ha
      end
      if !meaningNames.nil?
        _ha = Array.new
        meaningNames.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['meaningNames'] = _ha
      end
      if !meanings.nil?
        _ha = Array.new
        meanings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['meanings'] = _ha
      end
      return _h
    end

    #initializes this AtlasEntityHeader with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['displayText'].nil?
          _oa = _o['displayText']
            if(_oa.is_a? Hash)
              @displayText = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @displayText =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @displayText = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @displayText.push String.from_json(_item)
                 else
                   @displayText.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @displayText = _oa
            end
          end
        if !_o['classificationNames'].nil?
          _oa = _o['classificationNames']
            if(_oa.is_a? Hash)
              @classificationNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classificationNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classificationNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classificationNames.push String.from_json(_item)
                 else
                   @classificationNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classificationNames = _oa
            end
          end
        if !_o['classifications'].nil?
          _oa = _o['classifications']
            if(_oa.is_a? Hash)
              @classifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @classifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classifications = _oa
            end
          end
        if !_o['meaningNames'].nil?
          _oa = _o['meaningNames']
            if(_oa.is_a? Hash)
              @meaningNames = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meaningNames =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meaningNames = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meaningNames.push String.from_json(_item)
                 else
                   @meaningNames.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meaningNames = _oa
            end
          end
        if !_o['meanings'].nil?
          _oa = _o['meanings']
            if(_oa.is_a? Hash)
              @meanings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meanings =  Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meanings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meanings.push Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_item)
                 else
                   @meanings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meanings = _oa
            end
          end
    end

    # constructs a AtlasEntityHeader from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasEntity < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :updatedBy
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :relationshipAttributes
    # (no documentation provided)
    attr_accessor :classifications
    # (no documentation provided)
    attr_accessor :meanings

    # the json hash for this AtlasEntity
    def to_jaxb_json_hash
      _h = super
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['relationshipAttributes'] = relationshipAttributes.to_jaxb_json_hash unless relationshipAttributes.nil?
      if !classifications.nil?
        _ha = Array.new
        classifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['classifications'] = _ha
      end
      if !meanings.nil?
        _ha = Array.new
        meanings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['meanings'] = _ha
      end
      return _h
    end

    #initializes this AtlasEntity with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Bignum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['relationshipAttributes'].nil?
          _oa = _o['relationshipAttributes']
            if(_oa.is_a? Hash)
              @relationshipAttributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @relationshipAttributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @relationshipAttributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @relationshipAttributes.push Hash.from_json(_item)
                 else
                   @relationshipAttributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @relationshipAttributes = _oa
            end
          end
        if !_o['classifications'].nil?
          _oa = _o['classifications']
            if(_oa.is_a? Hash)
              @classifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @classifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @classifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @classifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @classifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @classifications = _oa
            end
          end
        if !_o['meanings'].nil?
          _oa = _o['meanings']
            if(_oa.is_a? Hash)
              @meanings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @meanings =  Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @meanings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @meanings.push Org::Apache::Atlas::Model::Glossary::Relations::AtlasTermAssignmentHeader.from_json(_item)
                 else
                   @meanings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @meanings = _oa
            end
          end
    end

    # constructs a AtlasEntity from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Instance

  # (no documentation provided)
  class AtlasRelationship < Org::Apache::Atlas::Model::Instance::AtlasStruct 

    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :updatedBy
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :end1
    # (no documentation provided)
    attr_accessor :end2
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :propagateTags
    # (no documentation provided)
    attr_accessor :propagatedClassifications
    # (no documentation provided)
    attr_accessor :blockedPropagatedClassifications

    # the json hash for this AtlasRelationship
    def to_jaxb_json_hash
      _h = super
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['end1'] = end1.to_jaxb_json_hash unless end1.nil?
      _h['end2'] = end2.to_jaxb_json_hash unless end2.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['propagateTags'] = propagateTags.to_jaxb_json_hash unless propagateTags.nil?
      if !propagatedClassifications.nil?
        _ha = Array.new
        propagatedClassifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['propagatedClassifications'] = _ha
      end
      if !blockedPropagatedClassifications.nil?
        _ha = Array.new
        blockedPropagatedClassifications.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['blockedPropagatedClassifications'] = _ha
      end
      return _h
    end

    #initializes this AtlasRelationship with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Bignum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['end1'].nil?
          _oa = _o['end1']
            if(_oa.is_a? Hash)
              @end1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end1 =  Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end1.push Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_item)
                 else
                   @end1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end1 = _oa
            end
          end
        if !_o['end2'].nil?
          _oa = _o['end2']
            if(_oa.is_a? Hash)
              @end2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @end2 =  Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @end2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @end2.push Org::Apache::Atlas::Model::Instance::AtlasObjectId.from_json(_item)
                 else
                   @end2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @end2 = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['propagateTags'].nil?
          _oa = _o['propagateTags']
            if(_oa.is_a? Hash)
              @propagateTags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagateTags =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagateTags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagateTags.push String.from_json(_item)
                 else
                   @propagateTags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagateTags = _oa
            end
          end
        if !_o['propagatedClassifications'].nil?
          _oa = _o['propagatedClassifications']
            if(_oa.is_a? Hash)
              @propagatedClassifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagatedClassifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagatedClassifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagatedClassifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @propagatedClassifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagatedClassifications = _oa
            end
          end
        if !_o['blockedPropagatedClassifications'].nil?
          _oa = _o['blockedPropagatedClassifications']
            if(_oa.is_a? Hash)
              @blockedPropagatedClassifications = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @blockedPropagatedClassifications =  Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @blockedPropagatedClassifications = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @blockedPropagatedClassifications.push Org::Apache::Atlas::Model::Instance::AtlasClassification.from_json(_item)
                 else
                   @blockedPropagatedClassifications.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @blockedPropagatedClassifications = _oa
            end
          end
    end

    # constructs a AtlasRelationship from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Atlas

module Model

module Glossary

module Enums

  # (no documentation provided)
  class AtlasTermAssignmentStatus

    # (no documentation provided)
    DISCOVERED = "DISCOVERED"

    # (no documentation provided)
    PROPOSED = "PROPOSED"

    # (no documentation provided)
    IMPORTED = "IMPORTED"

    # (no documentation provided)
    VALIDATED = "VALIDATED"

    # (no documentation provided)
    DEPRECATED = "DEPRECATED"

    # (no documentation provided)
    OBSOLETE = "OBSOLETE"

    # (no documentation provided)
    OTHER = "OTHER"
  end

end

end

end

end

end

end
